'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _util = require('./../util');

var _util2 = _interopRequireDefault(_util);

var _adapterError = require('./adapter-error.js');

var _adapterError2 = _interopRequireDefault(_adapterError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errors = {
    codes: {
        lost: 400,
        internal: 500
    },
    lost: new _adapterError2.default("Key not found", 400),
    internal: new _adapterError2.default("Internal adapter err", 500)

    /**
     *  Construct the context used for adapter methods.
     *  The design intention to expose only methods needed
     *  but still be able to reference the adater
     *  
     *  @param {Adapter} adapter   Adapter instance
     * 
     *  @return {object} A plain object that will serve as context for the client methods
     */
};exports.default = {
    make: function make(adapter) {
        return {
            on: function on(ev, callback) {
                if (adapter.context) {
                    adapter.context.on(ev, function (gun) {
                        this.to.next(gun);
                        callback(gun);
                    });
                }
            },
            toNode: _util2.default.gunify,
            errors: errors
        };
    }
};